'''
ODE.py : Defines ODE-related things I designed I feel ought to be in scipy.

'''

import math as m
import numpy as np

from choreo.scipy_plus.cython.SegmQuad import QuadFormula
from choreo.scipy_plus.cython.ODE import ExplicitSymplecticRKTable


#####################
# EXPLICIT RK STUFF #
#####################

# Order 1

SymplecticEuler = ExplicitSymplecticRKTable(
    c_table = np.array([1.])    ,
    d_table = np.array([1.])    ,
    th_cvg_rate = 1             ,
)

# Order 2

StormerVerlet = ExplicitSymplecticRKTable(
    c_table = np.array([0.    ,1.      ])   ,
    d_table = np.array([1./2  ,1./2    ])   ,
    th_cvg_rate = 2                         ,
)

sq2s2 = m.sqrt(2)/2
McAte2 = ExplicitSymplecticRKTable(
    c_table = np.array([1. - sq2s2  , sq2s2     ])  ,
    d_table = np.array([sq2s2       , 1.-sq2s2  ])  ,
    th_cvg_rate = 2  ,
)

# Order 3

Ruth3 = ExplicitSymplecticRKTable(
    c_table = np.array([1.        ,-2./3  ,2/3    ])    ,
    d_table = np.array([-1./24    , 3./4  ,7./24  ])    ,
    th_cvg_rate = 3                                     ,
)

McAte3 = ExplicitSymplecticRKTable(
    c_table = np.array([0.2683300957817599  ,-0.18799161879915982  , 0.9196615230173999     ])  ,
    d_table = np.array([0.9196615230173999 , -0.18799161879915982   ,0.2683300957817599     ])  ,
    th_cvg_rate = 3                                                                             ,
)

# Order 4

curt2 = m.pow(2,1./3)
Ruth4 = ExplicitSymplecticRKTable(
    c_table = np.array([1./(2*(2-curt2))  ,(1-curt2)/(2*(2-curt2))    ,(1-curt2)/(2*(2-curt2))    ,1./(2*(2-curt2))   ])    ,
    d_table = np.array([1./(2-curt2)      ,-curt2/(2-curt2)           ,1./(2-curt2)               ,0.                 ])    ,
    th_cvg_rate = 4                                                                                                         ,
)

Ruth4Rat = ExplicitSymplecticRKTable(
    c_table = np.array([0.     , 1./3  , -1./3     , 1.        , -1./3 , 1./3  ])   ,
    d_table = np.array([7./48  , 3./8  , -1./48    , -1./48    ,  3./8 , 7./48 ])   ,
    th_cvg_rate = 4                                                                 ,
)

McAte4 = ExplicitSymplecticRKTable(
    c_table = np.array([0.128846158365384185    ,  0.441583023616466524 ,-0.085782019412973646  , 0.515352837431122936  ])  ,
    d_table = np.array([ 0.334003603286321425   , 0.756320000515668291  , -0.224819803079420806 ,0.134496199277431089   ])  ,
    th_cvg_rate = 4                                                                                                         ,
)

CalvoSanz4 = ExplicitSymplecticRKTable(
    c_table = np.array([0.0             , 0.512721933192410 ,-0.12092087633891  ,0.403021281604210  , 0.205177661542290 ])  ,
    d_table = np.array([0.12501982279453,-0.14054801465937  , 0.61479130717558  ,0.33897802655364   , 0.061758858135626 ])  ,
    th_cvg_rate = 4                                                                                                         ,
)

# Order 5

McAte5 = ExplicitSymplecticRKTable(
    c_table = np.array([
        0.4423637942197494587   ,
        0.3235807965546976394   ,
        -0.603039356536491888   ,
        0.5858564768259621188   ,
        -0.088601336903027329   ,
        0.339839625839110000    ,
    ]),
    d_table = np.array([
        -0.0589796254980311632  ,
        0.0107050818482359840   ,
        0.4012695022513534480   ,
        -0.1713123582716007754  ,
        0.6989273703824752308   ,
        0.1193900292875672758   ,
    ]),
    th_cvg_rate = 5             ,
)

# Order 6

Yoshida6 = ExplicitSymplecticRKTable(
    c_table = np.array([
        0.0                 ,
        0.78451361047756    ,
        0.23557321335936    ,
        -1.1776799841789    ,
        1.3151863206839     ,
        -1.1776799841789    ,
        0.23557321335936    ,
        0.78451361047756    ,        
    ]),
    d_table = np.array([
        0.39225680523878    ,
        0.51004341191846    ,
        -0.47105338540977004,  # Precision ???
        0.0687531682525     ,
        0.0687531682525     ,
        -0.47105338540977004,  # Precision ???
        0.51004341191846    ,
        0.39225680523878    ,
    ]),
    th_cvg_rate = 6             ,
)

KahanLi6 = ExplicitSymplecticRKTable(
    c_table = np.array([
        0.0                             ,
        0.39216144400731413927925056    ,
        0.33259913678935943859974864    ,
        -0.70624617255763935980996482   ,
        0.08221359629355080023149045    ,
        0.79854399093482996339895035    ,
        0.08221359629355080023149045    ,
        -0.70624617255763935980996482   ,
        0.33259913678935943859974864    ,
        0.39216144400731413927925056    ,
    ]),
    d_table = np.array([
        0.19608072200365706963962528    ,
        0.3623802903983367889394996     ,
        -0.18682351788413996060510809   ,
        -0.312016288132044279789237185  ,
        0.4403787936141903818152204     ,
        0.4403787936141903818152204     ,
        -0.312016288132044279789237185  ,
        -0.18682351788413996060510809   ,
        0.3623802903983367889394996     ,
        0.19608072200365706963962528    ,
    ]),
    th_cvg_rate = 6                     ,
)

# Order 8

McAte8 = ExplicitSymplecticRKTable(
    c_table = np.array([
        0.0                             ,
        0.7416703643506129534482278     ,
        -0.4091008258000315939973001    ,
        0.19075471029623837995387626    ,
        -0.57386247111608226665638773   ,
        0.29906418130365592384446354    ,
        0.33462491824529818378495798    ,
        0.31529309239676659663205666    ,
        -0.79688793935291635401978884   ,
        0.31529309239676659663205666    ,
        0.33462491824529818378495798    ,
        0.29906418130365592384446354    ,
        -0.57386247111608226665638773   ,
        0.19075471029623837995387626    ,
        -0.4091008258000315939973001    ,
        0.7416703643506129534482278     ,
    ]),
    d_table = np.array([
        0.3708351821753064767241139     ,
        0.16628476927529067972546385    ,
        -0.10917305775189660702171192   ,
        -0.191553880409921943351255735  ,
        -0.137399144906213171405962095  ,
        0.31684454977447705381471076    ,
        0.32495900532103239020850732    ,
        -0.24079742347807487869386609   ,
        -0.24079742347807487869386609   ,
        0.32495900532103239020850732    ,
        0.31684454977447705381471076    ,
        -0.137399144906213171405962095  ,
        -0.191553880409921943351255735  ,
        -0.10917305775189660702171192   ,
        0.16628476927529067972546385    ,
        0.3708351821753064767241139     ,
    ]),
    th_cvg_rate = 8                     ,
)

KahanLi8 = ExplicitSymplecticRKTable(
    c_table = np.array([
        0.0                             ,
        0.13020248308889008087881763    ,
        0.56116298177510838456196441    ,
        -0.3894749626448472864080786    ,
        0.15884190655515560089621075    ,
        -0.39590389413323757733623154   ,
        0.18453964097831570709183254    ,
        0.25837438768632204729397911    ,
        0.29501172360931029887096624    ,
        -0.60550853383003451169892108   ,
        0.29501172360931029887096624    ,
        0.25837438768632204729397911    ,
        0.18453964097831570709183254    ,
        -0.39590389413323757733623154   ,
        0.15884190655515560089621075    ,
        -0.3894749626448472864080786    ,
        0.56116298177510838456196441    ,
        0.13020248308889008087881763    ,
    ]),
    d_table = np.array([
        0.065101241544445040439408815   ,
        0.34568273243199923272039102    ,
        0.085844009565130549076942905   ,
        -0.115316528044845842755933925  ,
        -0.118530993789040988220010395  ,
        -0.1056821265774609351221995    ,
        0.221457014332318877192905825   ,
        0.276693055647816173082472675   ,
        -0.15524840511036210641397742   ,
        -0.15524840511036210641397742   ,
        0.276693055647816173082472675   ,
        0.221457014332318877192905825   ,
        -0.1056821265774609351221995    ,
        -0.118530993789040988220010395  ,
        -0.115316528044845842755933925  ,
        0.085844009565130549076942905   ,
        0.34568273243199923272039102    ,
        0.065101241544445040439408815   ,
    ]),
    th_cvg_rate = 8                     ,
)



SofSpa10 = ExplicitSymplecticRKTable(
    c_table = np.array([
        0.0                             ,
        0.07879572252168641926390768    ,
        0.31309610341510852776481247    ,
        0.02791838323507806610952027    ,
        -0.2295928415939070941512134    ,
        0.13096206107716486317465686    ,
        -0.26973340565451071434460973   ,
        0.07497334315589143566613711    ,
        0.11199342399981020488957508    ,
        0.36613344954622675119314812    ,
        -0.39910563013603589787862981   ,
        0.10308739852747107731580277    ,
        0.41143087395589023782070412    ,
        -0.00486636058313526176219566   ,
        -0.39203335370863990644808194   ,
        0.0519425029624496470371829     ,
        0.05066509075992449633587434    ,
        0.0496743706397298790545688     ,
        0.04931773575959453791768001    ,
        0.0496743706397298790545688     ,
        0.05066509075992449633587434    ,
        0.0519425029624496470371829     ,
        -0.39203335370863990644808194   ,
        -0.00486636058313526176219566   ,
        0.41143087395589023782070412    ,
        0.10308739852747107731580277    ,
        -0.39910563013603589787862981   ,
        0.36613344954622675119314812    ,
        0.11199342399981020488957508    ,
        0.07497334315589143566613711    ,
        -0.26973340565451071434460973   ,
        0.13096206107716486317465686    ,
        -0.2295928415939070941512134    ,
        0.02791838323507806610952027    ,
        0.31309610341510852776481247    ,
        0.07879572252168641926390768    ,
    ]),
    d_table = np.array([
        0.03939786126084320963195384    ,
        0.195945912968397473514360075   ,
        0.17050724332509329693716637    ,
        -0.100837229179414514020846565  ,
        -0.04931539025837111548827827   ,
        -0.069385672288672925584976435  ,
        -0.09738003124930963933923631   ,
        0.093483383577850820277856095   ,
        0.2390634367730184780413616     ,
        -0.016486090294904573342740845  ,
        -0.14800911580428241028141352   ,
        0.257259136241680657568253445   ,
        0.20328225668637748802925423    ,
        -0.1984498571458875841051388    ,
        -0.17004542537309512970544952   ,
        0.05130379686118707168652862    ,
        0.05016973069982718769522157    ,
        0.049496053199662208486124405   ,
        0.049496053199662208486124405   ,
        0.05016973069982718769522157    ,
        0.05130379686118707168652862    ,
        -0.17004542537309512970544952   ,
        -0.1984498571458875841051388    ,
        0.20328225668637748802925423    ,
        0.257259136241680657568253445   ,
        -0.14800911580428241028141352   ,
        -0.016486090294904573342740845  ,
        0.2390634367730184780413616     ,
        0.093483383577850820277856095   ,
        -0.09738003124930963933923631   ,
        -0.069385672288672925584976435  ,
        -0.04931539025837111548827827   ,
        -0.100837229179414514020846565  ,
        0.17050724332509329693716637    ,
        0.195945912968397473514360075   ,
        0.03939786126084320963195384    ,
    ]),
    th_cvg_rate = 10                     ,
)


