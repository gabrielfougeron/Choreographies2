name: Unit tests on diverse OS

on: workflow_dispatch 

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        # python-version: ["3.9", "3.10", "3.11"]
        python-version: ["3.11"]
        # os: [ubuntu-22.04, ubuntu-20.04, macos-latest, windows-latest]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup conda
      uses: s-weigand/setup-conda@v1
      with:
        update-conda: true
        python-version: ${{ matrix.python-version }}
        conda-channels: anaconda, conda-forge

    - name: Install dependencies for MacOs
      if: startsWith(matrix.os, 'macos')
      run: |       
        conda install -c conda-forge -y plantuml 
        brew install llvm libomp suite-sparse

        echo 'PATH="/usr/local/opt/llvm/bin:$PATH"' >> $GITHUB_ENV
        echo 'CC=/usr/local/opt/llvm/bin/clang' >> $GITHUB_ENV
        echo 'LDFLAGS=-L/usr/local/opt/llvm/lib' >> $GITHUB_ENV
        echo 'CFLAGS=-I/usr/local/opt/llvm/include' >> $GITHUB_ENV

    - name: Prepare MSVC
      if: startsWith(matrix.os, 'windows')
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64

    - name: Install dependencies for Windows
      if: startsWith(matrix.os, 'windows')
      run: |
        conda install -c conda-forge -y suitesparse plantuml

        echo 'INCLUDE="$INCLUDE;C:\Miniconda\envs\__setup_conda\Library\include\suitesparse;C:\Miniconda\envs\__setup_conda\Lib\site-packages\sparseqr"' >> $env:GITHUB_ENV
        echo 'LIB="$LIB;C:\Miniconda\envs\__setup_conda\Library\include\suitesparse;C:\Miniconda\envs\__setup_conda\Lib\site-packages\sparseqr"' >> $env:GITHUB_ENV

    - name: Install dependencies for Ubuntu
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        conda install -c conda-forge -y suitesparse clang plantuml openmp

    - name: Build Test Docs
      run: |

        pip install --upgrade pip wheel
        pip install setuptools>=42 wheel Cython build attrs pytest pytest-xdist Sphinx pydata-sphinx-theme sphinx-gallery sphinx-pyproject sphinx-needs sphinx-test-reports sphinxcontrib.plantuml nb2plots networkx sparseqr==1.2 scipy numpy matplotlib mpmath

        python setup.py build_ext --inplace

        pytest

        cd docs
        make html
        cd ..

    - name: Read Emscripten version number
      if: startsWith(matrix.os, 'ubuntu') && matrix.python-version == '3.11'
      run: |
        pip install .[full]
        echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV
  
    - name: Setup Emscripten
      if: startsWith(matrix.os, 'ubuntu')
      uses: mymindstorm/setup-emsdk@v11
      with:
        version: ${{ env.EMSCRIPTEN_VERSION }}
  
    - name: Build for Pyodide
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        echo  ${{ env.EMSCRIPTEN_VERSION }}
        pyodide build

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os  }}-${{ matrix.python-version }}
        path: './dist/'

  gather-dists:
    runs-on: ubuntu-latest
    needs: build
    if: success() || failure()
    steps:
      - uses: actions/checkout@v3
      - name: Download reports' artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts-dl

      - name: Copy artifacts
        run: |
          mkdir dist
          find ./artifacts-dl -name '*.whl' -exec cp {} ./dist \; 

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: choreo-dist
          path: './dist/'


# 
# pip install --upgrade pip wheel
# pip install .[cli,docs,test,build]
# 
# python -m build
# 
# python setup.py build_ext --inplace
# 
# pytest
# 
# cd docs
# make html
# cd ..
# 
  


# 
# echo "C:\Miniconda\envs\__setup_conda\Library\include\suitesparse;C:\Miniconda\envs\__setup_conda\Lib\site-packages\sparseqr;" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#         
# echo 'INCLUDE="C:\Miniconda\envs\__setup_conda\Library\include\suitesparse;C:\Miniconda\envs\__setup_conda\Lib\site-packages\sparseqr;"' >> $env:GITHUB_ENV
# echo 'LIB="C:\Miniconda\envs\__setup_conda\Library\include\suitesparse;C:\Miniconda\envs\__setup_conda\Lib\site-packages\sparseqr;"' >> $env:GITHUB_ENV